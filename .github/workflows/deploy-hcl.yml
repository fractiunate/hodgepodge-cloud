name: "Deploy: HCL Project"
run-name: "${{ inputs.mode }} ${{ inputs.project }} in stage ${{ inputs.stage }} on branch ${{ github.ref }}"

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Plan or Deploy"
        required: true
        type: choice
        options:
          - "Plan"
          - "Apply"
          - "Plan -destroy"
          - "Destroy"
      project:
        description: "Project name"
        required: true
        type: choice
        options:
          - "static-webhosting"
          - "container-apps-nginx"
          - "container-apps-fractiunate"
          - "kubernetes/base"
          - "kubernetes/tools"
          - "app-services-docker"
          - "ticket-system/storage-queue"
          - "ticket-system/email-communication-service"
          - "ticket-system/eventhub"
      stage:
        description: "Stage"
        required: true
        type: choice
        default: "dev"
        options:
          - "dev"
          - "int"
          - "prd"
      opentofu-version:
        description: "OpenTofu version to use"
        required: false
        default: "1.10.0-beta1"
      safety-check:
        description: 'Enter "delete" to confirm destroy'
        required: false
        default: ""

concurrency:
  group: ${{ inputs.mode == 'Plan' && github.sha || format('{0}-{1}', inputs.project, inputs.stage) }}
  cancel-in-progress: false

jobs:
  hcl:
    environment: ${{ format('{0}-{1}', inputs.project, inputs.stage) }}
    runs-on: ubuntu-latest
    env:
      backend_config_resource_group_name: ${{ secrets.BACKEND_CONFIG_RESOURCE_GROUP_NAME }}
      backend_config_storage_account_name: ${{ secrets.BACKEND_CONFIG_STORAGE_ACCOUNT_NAME }}
      backend_config_storage_container_name: ${{ secrets.BACKEND_CONFIG_STORAGE_CONTAINER_NAME || 'tfstates' }}
      backend_config_key: ${{ format('{0}-{1}', inputs.project, inputs.stage) }}
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID || vars.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET || vars.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID || vars.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID || vars.ARM_SUBSCRIPTION_ID }}
    steps:
      - name: Destroy Check
        if: (inputs.mode == 'Destroy' && inputs.safety-check != 'delete')
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            core.setFailed('Destroy validation check failed. Please confirm by entering "delete" in the input field.')
      - uses: actions/checkout@v4
      - uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ inputs.opentofu-version || '1.10.0-beta' }}
      - name: OpenTofu Init
        run: |
          export TF_VAR_ARM_SUBSCRIPTION_ID=${{ env.ARM_SUBSCRIPTION_ID }}
          tofu -chdir=terraform/${{ inputs.project}} init \
            -backend-config="resource_group_name=${{ env.backend_config_resource_group_name }}" \
            -backend-config="storage_account_name=${{ env.backend_config_storage_account_name }}" \
            -backend-config="container_name=${{ env.backend_config_storage_container_name }}" \
            -backend-config="key=${{ env.backend_config_key }}"

      - name: Set Github Environment Secrets
        id: set-secrets
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const secrets = "${{ toJson(secrets) || '{}' }}";
            const secretsFilePath = './terraform/${{ inputs.project}}/${{ inputs.stage }}.gh.secrets.js';

            try {
                const secretsConfig = require(secretsFilePath).data || [];
                for (const secret of secretsConfig) {
                    const uppercaseSecretName = secret.name.toUpperCase();
                    console.log(`Checking secret: ${uppercaseSecretName}`);
                    if (secret.mandatory && !secrets[uppercaseSecretName]) {
                        console.error(`Mandatory secret ${uppercaseSecretName} is missing.`);
                        core.setFailed(`Mandatory secret ${uppercaseSecretName} is missing.`);
                    }else{
                        if (secrets[uppercaseSecretName]) {
                          const secretValue = secrets[secret.nameuppercaseSecretName]
                          exportVariable(`TF_VAR_${secret.name}`, secretValue);
                        }
                    }
                }
            } catch (error) {
                console.error(`Error reading secrets file: ${error.message}`);
            }

      - name: OpenTofu fmt
        id: fmt
        run: tofu fmt -check
        continue-on-error: true
      - name: OpenTofu Validate
        id: validate
        run: tofu validate -no-color
      - name: OpenTofu ${{ inputs.mode }}
        id: hcl-action
        run: |
          export TF_VAR_ARM_SUBSCRIPTION_ID=${{ env.ARM_SUBSCRIPTION_ID }}
          export TF_VAR_project=${{ inputs.project }}
          export TF_VAR_stage=${{ inputs.stage }}
          chdir=terraform/${{ inputs.project}}
          touch ${chdir}/${{ inputs.stage }}.tfvars
          tofu -chdir=${chdir} \
            $(echo "${{ inputs.mode }}" | tr '[:upper:]' '[:lower:]') \
            -no-color \
            -input=false \
            -var-file=${{ inputs.stage }}.tfvars \
            ${{ ((inputs.mode == 'Destroy') || (inputs.mode == 'Apply')) && ' -auto-approve' || ' -out=tfplan' }}

            # ${{ (inputs.mode == 'Plan' || inputs.mode == 'Plan -destroy') && ' -lock=false' || ' '}}
      - name: "Plan to File"
        if: (inputs.mode == 'Plan' || inputs.mode == 'Plan -destroy')
        shell: bash
        run: |
          tofu -chdir=terraform/${{ inputs.project}} \
          show -no-color tfplan > tf_plan_output.txt
      - name: Job Summary
        id: plantosummary
        if: (inputs.mode == 'Plan' || inputs.mode == 'Plan -destroy')
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            try {
              const fs = require('fs')
              if (fs.existsSync('./tf_plan_output.txt')){
                const fileContentPlanOutput = fs.readFileSync('./tf_plan_output.txt')
                if (typeof fileContentPlanOutput != 'undefined'){
                  const planOutput = fileContentPlanOutput.toString()
                  await core.summary
                    .addHeading('OpenTofu plan summary (${{ inputs.project }})').addEOL()
                    // note: the additional second \n is a github bug.. (see: 20240109)
                    .addDetails("Click to expand", `\n\n~~~\n${planOutput}\n~~~\n`)
                    .addEOL().write();
                }  
              }  
            } catch(err) {
              core.error("Error while reading file:"+ err)
              core.setFailed(err)
            }
